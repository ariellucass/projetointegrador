// server.js

// 1. M√≥dulos necess√°rios
const express = require('express');
const path = require('path');
const session = require('express-session');
const { Pool } = require('pg');
const bcrypt = require('bcrypt'); // üîê Para seguran√ßa de senhas

const app = express();
const PORT = process.env.PORT || 3000;

// 2. Middlewares
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));
app.use(session({
  secret: process.env.SESSION_SECRET || 'chaveSegura123', // üîê Use vari√°vel de ambiente em produ√ß√£o
  resave: false,
  saveUninitialized: false, // üîê Melhoria de seguran√ßa
  cookie: {
    httpOnly: true,
    secure: false, // true se usar HTTPS
    maxAge: 1000 * 60 * 60 // 1 hora
  }
}));

// 3. Conex√£o PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER || 'lucas',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'projeto',
  password: process.env.DB_PASSWORD || '18059829',
  port: process.env.DB_PORT || 5432,
});

pool.connect(err => {
  if (err) {
    console.error('‚ùå Falha ao conectar com o PostgreSQL:', err.stack);
  } else {
    console.log('‚úÖ Conectado ao PostgreSQL.');
  }
});

// 4. Middleware de verifica√ß√£o de login
function verificarLogin(req, res, next) {
  if (req.session.user) {
    next();
  } else {
    res.redirect('/login');
  }
}

// 5. Rotas

// Tela de login
app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

// Processamento do login
app.post('/login', async (req, res) => {
  const { login, senha } = req.body;

  if (!login || !senha) {
    return res.status(400).send('Usu√°rio e senha obrigat√≥rios.');
  }

  try {
    const query = 'SELECT * FROM usuarios WHERE login = $1';
    const result = await pool.query(query, [login]);

    if (result.rows.length === 0) {
      return res.send('<h1>Login inv√°lido</h1><a href="/login">Tentar novamente</a>');
    }

    const user = result.rows[0];
    const senhaValida = await bcrypt.compare(senha, user.senha); // üîê Compara√ß√£o segura

    if (!senhaValida) {
      return res.send('<h1>Login inv√°lido</h1><a href="/login">Tentar novamente</a>');
    }

    req.session.user = user.login;
    res.redirect('/');
  } catch (err) {
    console.error('Erro ao autenticar:', err);
    res.status(500).send('Erro interno.');
  }
});

// Logout
app.get('/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) console.error('Erro ao destruir sess√£o:', err);
    res.redirect('/login');
  });
});

// P√°gina principal protegida
app.get('/', verificarLogin, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Cadastro de morador
app.post('/cadastrar', verificarLogin, async (req, res) => {
  const { nome, telefone, bloco, apartamento } = req.body;

  if (!nome || !telefone || !bloco || !apartamento) {
    return res.status(400).send('<h1>Erro</h1><p>Informe todos os dados obrigat√≥rios.</p><a href="/">Voltar</a>');
  }

  try {
    const checkQuery = 'SELECT COUNT(*) FROM morador WHERE telefone = $1 AND bloco = $2 AND apartamento = $3';
    const checkResult = await pool.query(checkQuery, [telefone, bloco, apartamento]);
    const existe = parseInt(checkResult.rows[0].count) > 0;

    if (existe) {
      return res.status(409).send('<h1>Aten√ß√£o</h1><p>J√° existe esse morador.</p><a href="/">Voltar</a>');
    }

    const insertQuery = 'INSERT INTO morador (nome, telefone, bloco, apartamento) VALUES ($1, $2, $3, $4)';
    await pool.query(insertQuery, [nome, telefone, bloco, apartamento]);

    res.send(`<h1>Sucesso</h1><p>Morador <strong>${nome}</strong> cadastrado.</p><a href="/">Voltar</a>`);
  } catch (err) {
    console.error('Erro no cadastro:', err);
    res.status(500).send('<h1>Erro</h1><p>Erro ao cadastrar.</p><a href="/">Voltar</a>');
  }
});

// Consulta por data
app.post('/consultar', verificarLogin, async (req, res) => {
  const { data_inicio, data_fim } = req.body;

  if (!data_inicio || !data_fim) {
    return res.status(400).send('<h1>Erro</h1><p>Datas obrigat√≥rias.</p><a href="/">Voltar</a>');
  }

  try {
    const query = `
      SELECT nomeramal, ramalprincipal, ramaldestino, contexto,
             TO_CHAR(ligacaorealizada, 'DD/MM/YYYY HH24:MI') AS ligacaorealizada,
             TO_CHAR(ligacaofinal, 'DD/MM/YYYY HH24:MI') AS ligacaofinal,
             duracao
      FROM cdr
      WHERE ligacaorealizada BETWEEN $1 AND $2
      ORDER BY ligacaorealizada DESC
    `;
    const { rows } = await pool.query(query, [data_inicio, data_fim]);

    let html = `
      <h1>Resultado</h1>
      <p>De ${data_inicio} at√© ${data_fim}</p>
      <table border="1" width="100%">
        <thead>
          <tr>
            <th>Nome</th><th>Ramal Principal</th><th>Ramal Destino</th>
            <th>Contexto</th><th>Liga√ß√£o</th><th>Atendida</th><th>Dura√ß√£o</th>
          </tr>
        </thead>
        <tbody>
          ${rows.map(row => `
            <tr>
              <td>${row.nomeramal}</td>
              <td>${row.ramalprincipal}</td>
              <td>${row.ramaldestino}</td>
              <td>${row.contexto}</td>
              <td>${row.ligacaorealizada}</td>
              <td>${row.ligacaofinal}</td>
              <td>${row.duracao}</td>
            </tr>`).join('')}
        </tbody>
      </table>
      ${rows.length === 0 ? '<p>Nenhum registro encontrado.</p>' : ''}
      <br><a href="/">Nova Consulta</a>
    `;

    res.send(html);
  } catch (err) {
    console.error('Erro na consulta:', err);
    res.status(500).send('<h1>Erro</h1><p>N√£o foi poss√≠vel consultar.</p><a href="/">Voltar</a>');
  }
});

// 6. Inicia o servidor
app.listen(PORT, () => {
  console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
});
